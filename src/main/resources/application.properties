spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=jdbc:mysql://localhost:3306/Syndicat01?useUnicode=true&characterEncoding=UTF-8&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql = false
 logging.level.com.com.example.Securite_Routiere=DEBUG
server.port=85

server.session.tracking-modes=cookie

# ===============================
# = DATA SOURCE
# ===============================
# Set here configurations for the database connection
# spring.datasource.url=jdbc:db2://192.168.1.204:50000/DGSCDB
# spring.datasource.username=db2admin
# spring.datasource.password=db2@sdi2020
# spring.datasource.driver-class-name=com.ibm.db2.jcc.DB2Driver
# Keep the connection alive if idle for a long time (needed in production)
# spring.datasource.testWhileIdle=true
# spring.datasource.validationQuery=SELECT 1
# ===============================

# ==============================================================
# = Spring Security / Queries for AuthenticationManagerBuilder
# ==============================================================
#spring.queries.users-query=select email, password, active from user where email=?
#spring.queries.roles-query=select u.email, r.role_name from user u inner join user_role ur on(u.user_id=ur.user_id) inner join role r on(ur.role_id=r.role_id) where u.email=?

#spring.queries.users-query=select login, password, active from user where login=?
#spring.queries.roles-query=select u.login, r.role from user u inner join user_role ur on(u.user_id=ur.user_id) inner join role r on(ur.role_id=r.role_id) where u.login=?


spring.queries.users-query=select login, password, active from user where login=?
spring.queries.roles-query=select u.login, r.role from user u inner join user_role ur on(u.user_id=ur.user_id) inner join role r on(ur.role_id=r.role_id) where u.login=?
